/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,28],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,8],$V9=[1,20],$Va=[1,21],$Vb=[1,22],$Vc=[1,23],$Vd=[1,26],$Ve=[1,27],$Vf=[1,29],$Vg=[1,30],$Vh=[1,31],$Vi=[1,32],$Vj=[5,12,15,19,23,24,30,31,32,49,51,52,53,54,73,74,75,76,77,78],$Vk=[5,12,15,19,23,24,30,31,32,34,37,39,40,44,49,51,52,53,54,58,73,74,75,76,77,78],$Vl=[1,50],$Vm=[1,51],$Vn=[1,49],$Vo=[15,73,74,75,76,77,78],$Vp=[18,26,47],$Vq=[2,41],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[15,17,18,26,38,42,43,47,62,63,65,66,67,68,69,70,71,72],$Vw=[1,66],$Vx=[1,72],$Vy=[1,69],$Vz=[1,80],$VA=[17,47],$VB=[17,18],$VC=[12,15,19,23,24,30,31,32,34,37,39,40,44,51,52,53,54,58,73,74,75,76,77,78],$VD=[15,17,18,26,38,42,43,47,62,63,65,66,67,68,69,70],$VE=[17,18,62,63],$VF=[1,149],$VG=[1,150],$VH=[34,37,40];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"main":7,"metodo":8,"adentro":9,"adentros":10,"declaracionvar":11,"RCONSOLE":12,"PUNTO":13,"RWRITE":14,"PARIZQ":15,"CUERPOIMP":16,"PARDER":17,"PTCOMA":18,"RIF":19,"expresionlogica":20,"LLAVEIZQ":21,"finif":22,"RELSE":23,"RFOR":24,"variablefor":25,"IGUAL":26,"expresion":27,"subirfor":28,"poscontinue":29,"RWHILE":30,"RDO":31,"RSWITCH":32,"casos":33,"LLAVEDER":34,"CONTENIDOHTML":35,"casoevaluar":36,"RCASE":37,"DOSPUNTOS":38,"RBREAK":39,"RDEFAULT":40,"tipodato":41,"MAS":42,"MENOS":43,"RCONTINUE":44,"listavariables":45,"asingacionuna":46,"COMA":47,"variablesls":48,"RVOID":49,"RMAIN":50,"RSTRING":51,"RINT":52,"RDOUBLE":53,"RCHAR":54,"tipometodo":55,"parametrosdentro":56,"posreturn":57,"RRETURN":58,"listaparametros":59,"parametros":60,"expresionrelacional":61,"ANDY":62,"ORO":63,"ADMIRACION":64,"MAYOR":65,"MENOR":66,"MAYORIGUAL":67,"MENORIGUAL":68,"IGUALES":69,"DISTINTO":70,"POR":71,"DIVIDIDO":72,"ENTERO":73,"DECIMAL":74,"CADENA":75,"IDENTIFICADOR":76,"RTRUE":77,"RFALSE":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"RCONSOLE",13:"PUNTO",14:"RWRITE",15:"PARIZQ",17:"PARDER",18:"PTCOMA",19:"RIF",21:"LLAVEIZQ",23:"RELSE",24:"RFOR",26:"IGUAL",30:"RWHILE",31:"RDO",32:"RSWITCH",34:"LLAVEDER",35:"CONTENIDOHTML",37:"RCASE",38:"DOSPUNTOS",39:"RBREAK",40:"RDEFAULT",42:"MAS",43:"MENOS",44:"RCONTINUE",47:"COMA",49:"RVOID",50:"RMAIN",51:"RSTRING",52:"RINT",53:"RDOUBLE",54:"RCHAR",58:"RRETURN",62:"ANDY",63:"ORO",64:"ADMIRACION",65:"MAYOR",66:"MENOR",67:"MAYORIGUAL",68:"MENORIGUAL",69:"IGUALES",70:"DISTINTO",71:"POR",72:"DIVIDIDO",73:"ENTERO",74:"DECIMAL",75:"CADENA",76:"IDENTIFICADOR",77:"RTRUE",78:"RFALSE"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[10,2],[10,1],[10,1],[9,1],[9,7],[9,6],[9,3],[9,7],[9,13],[9,6],[9,3],[9,7],[16,1],[16,1],[33,2],[33,1],[36,6],[36,3],[25,2],[25,1],[28,2],[28,2],[22,1],[22,2],[29,1],[29,2],[29,4],[11,3],[11,2],[46,1],[46,3],[45,3],[45,1],[48,1],[7,7],[41,1],[41,1],[41,1],[41,1],[8,6],[57,1],[57,3],[57,4],[55,2],[55,2],[56,1],[56,2],[59,3],[59,1],[60,2],[20,3],[20,3],[20,2],[20,1],[61,3],[61,3],[61,3],[61,3],[61,3],[61,3],[27,3],[27,3],[27,3],[27,3],[27,1],[27,1],[27,3],[27,1],[27,1],[27,1],[27,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
		console.log('Termino analisis ');
		return $$[$0-1];
		
break;
case 2:
  this.$ = { 
					tipo: 'instrucciones',
					valor: [$$[$0-1],$$[$0]]
				  };	
break;
case 3:
  this.$ = { 
					tipo: 'instrucciones',
					valor: $$[$0] 
				  };	
break;
case 4: case 10:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 5: case 6: case 7:
  this.$ = { 
					tipo: 'instruccion',
					valor: $$[$0]
					};	
break;
case 8:
  this.$ = { 
					tipo: 'ADENTROS',
					valor: [$$[$0-1], $$[$0]]
					};	
break;
case 9:
  this.$ = { 
					tipo: 'ADENTROS',
					valor: $$[$0]
					};	
break;
case 11:
  this.$ = { 
					tipo: 'ADENTRO',
					valor: $$[$0]
					};	
break;
case 12: case 15: case 19:
  this.$ = { 
					tipo: 'ADENTRO',
					valor: [$$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]]
					};	
break;
case 13: case 17:
  this.$ = { 
					tipo: 'ADENTRO',
					valor: [$$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]]
					};	
break;
case 14: case 18:
  this.$ = { 
					tipo: 'ADENTRO',
					valor: [$$[$0-2], $$[$0-1], $$[$0]]
					};	
break;
case 16:
  this.$ = { 
					tipo: 'ADENTRO',
					valor: [$$[$0-12], $$[$0-11], $$[$0-10], $$[$0-9], $$[$0-8], $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]]
					};	
break;
case 20: case 21:
  this.$ = { 
					tipo: 'CUERPO_IMP',
					valor: $$[$0]
					};	
break;
case 22:
  this.$ = { 
					tipo: 'CASOS',
					valor: [$$[$0-1], $$[$0]]
					};	
break;
case 23:
  this.$ = { 
					tipo: 'CASOS',
					valor: $$[$0]
					};	
break;
case 24:
  this.$ = { 
					tipo: 'CASO_EVALUAR',
					valor: [$$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]]
					};	
break;
case 25:
  this.$ = { 
					tipo: 'CASO_EVALUAR',
					valor: [$$[$0-2], $$[$0-1], $$[$0]]
					};	
break;
case 26:
  this.$ = { 
					tipo: 'VARIABLE_FOR',
					valor: [$$[$0-1], $$[$0]]
					};	
break;
case 27:
  this.$ = { 
					tipo: 'VARIABLE_FOR',
					valor: $$[$0]
					};	
break;
case 28: case 29:
  this.$ = { 
					tipo: 'SUBIR_FOR',
					valor: [$$[$0-1], $$[$0]]
					};	
break;
case 30:
  this.$ = { 
					tipo: 'FIN_IF',
					valor: $$[$0]
					};	
break;
case 31:
  this.$ = { 
					tipo: 'FIN_IF',
					valor: [$$[$0-1], $$[$0]]
					};	
break;
case 32:
  this.$ = { 
					tipo: 'POS_CONTINUE',
					valor: $$[$0]
					};	
break;
case 33:
  this.$ = { 
					tipo: 'POS_CONTINUE',
					valor: [$$[$0-1], $$[$0]]
					};	
break;
case 34:
  this.$ = { 
					tipo: 'POS_CONTINUE',
					valor: [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]]
					};	
break;
case 35:
  this.$ = { 
					tipo: 'DECLARACION_VAR',
					valor: [$$[$0-2], $$[$0-1], $$[$0]]
					};	
break;
case 36:
  this.$ = { 
					tipo: 'DECLARACION_VAR',
					valor: [$$[$0-1], $$[$0]]
					};	
break;
case 37:
  this.$ = { 
					tipo: 'ASIGNACION_UNA',
					valor: $$[$0]
					};	
break;
case 38:
  this.$ = { 
					tipo: 'ASINGACION_UNA',
					valor: [$$[$0-2], $$[$0-1], $$[$0]]
					};	
break;
case 39:
  this.$ = { 
					tipo: 'LISTA_VARIABLES',
					valor: [$$[$0-2], $$[$0-1], $$[$0]]
					};	
break;
case 40:
  this.$ = { 
					tipo: 'LISTA_VARIABLES',
					valor: $$[$0]
					};	
break;
case 41:
  this.$ = { 
					tipo: 'VARIABLE',
					valor: $$[$0]
					};	
break;
case 42:
  this.$ = { 
					tipo: 'MAIN',
					valor: [ $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0] ]
					};	
break;
case 43: case 44: case 45: case 46:
  this.$ = { 
					tipo: 'TIPO_DATO',
					valor: $$[$0]
					};	
break;
case 47:
  this.$ = { 
					tipo: 'METODO',
					valor:[
						$$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]
					]
					};	
break;
case 48:
  this.$ = { 
					tipo: 'POS_RETURN',
					valor:	$$[$0]
					
					};	
break;
case 49:
  this.$ = { 
					tipo: 'POS_RETURN',
					valor:[
						$$[$0-2], $$[$0-1]
					]
					};	
break;
case 50:
  this.$ = { 
					tipo: 'POS_RETURN',
					valor:[
						$$[$0-3], $$[$0-2], $$[$0-1]
					]
					};	
break;
case 51: case 52:
  this.$ = { 
					tipo: 'TIPO_METODO',
					valor:[
						$$[$0-1], $$[$0]
					]
					};	
break;
case 53:
  this.$ = { 
					tipo: 'PARAMETROS_DENTRO',
					valor:	$$[$0]
					};	
break;
case 54:
  this.$ = { 
					tipo: 'PARAMETROS_DENTRO',
					valor:[
						$$[$0-1], $$[$0]
					]
					};	
break;
case 55:
  this.$ = { 
					tipo: 'LISTA_PARAMETROS',
					valor:[
						$$[$0-2], $$[$0-1] , $$[$0]
					]
					};	
break;
case 56:
  this.$ = { 
					tipo: 'LISTA_PARAMETROS',
					valor: $$[$0]
					
					};	
break;
case 57:
  this.$ = { 
					tipo: 'PARAMETROS',
					valor:[
						$$[$0-1], $$[$0]
					]
					};	
break;
case 58: case 59:
  this.$ = { 
					tipo: 'EXP_LOGICA',
					valor:[
						$$[$0-2], $$[$0-1], $$[$0]
					]
					};	
break;
case 60:
  this.$ = { 
					tipo: 'EXP_LOGICA',
					valor:[
						$$[$0-1], $$[$0]
					]
					};	
break;
case 61:
  this.$ = { 
					tipo: 'EXP_REL',
					valor:$$[$0]
					};	
break;
case 62: case 63: case 64: case 65: case 66: case 67:
  this.$ = { 
					tipo: 'EXP_REL',
					valor:[
						$$[$0-2], $$[$0-1], $$[$0]
					]
					};	
break;
case 68: case 69: case 70: case 71:
  this.$ = { 
					tipo: 'EXPRESION',
					valor:[
						$$[$0-2], $$[$0-1], $$[$0]
					]
					};	
break;
case 72:
  this.$ = { 
					tipo: 'ENTERO',
					valor: $$[$0]
					};	
break;
case 73:
  this.$ = { 
					tipo: 'DECIMAL',
					valor: $$[$0]
					};	
break;
case 74:
  this.$ = { 
					tipo: 'AGRUPACION',
					valor:[
						$$[$0-2], $$[$0-1], $$[$0]
					]
					};	
break;
case 75:
  this.$ = { 
					tipo: 'CADENA',
					valor: $$[$0]
					};	
break;
case 76:
  this.$ = { 
					tipo: 'IDENTIFICADOR',
					valor: $$[$0]
					};	
break;
case 77: case 78:
  this.$ = { 
					tipo: 'BOOL',
					valor: $$[$0]
					};	
break;
}
},
table: [{2:[1,4],3:1,4:2,6:3,7:5,8:6,9:7,11:10,12:$V0,15:$V1,19:$V2,23:$V3,24:$V4,27:25,30:$V5,31:$V6,32:$V7,41:18,45:19,48:24,49:$V8,51:$V9,52:$Va,53:$Vb,54:$Vc,55:9,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{1:[3]},{5:[1,33],6:34,7:5,8:6,9:7,11:10,12:$V0,15:$V1,19:$V2,23:$V3,24:$V4,27:25,30:$V5,31:$V6,32:$V7,41:18,45:19,48:24,49:$V8,51:$V9,52:$Va,53:$Vb,54:$Vc,55:9,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($Vj,[2,3]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),{15:$V1,27:36,50:[1,35],73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:[1,37]},o($Vk,[2,11]),{13:[1,38]},{15:[1,39]},{19:[1,41],21:[1,40]},{15:[1,42]},{15:[1,43]},{21:[1,44]},{15:[1,45]},{15:$V1,27:46,45:47,48:24,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{18:$Vl,26:$Vm,46:48,47:$Vn},o($Vo,[2,43]),o($Vo,[2,44]),o($Vo,[2,45]),o($Vo,[2,46]),o($Vp,[2,40]),o($Vp,$Vq,{42:$Vr,43:$Vs,71:$Vt,72:$Vu}),o($Vv,[2,72]),o($Vv,[2,73]),{15:$V1,27:56,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($Vv,[2,75]),o($Vv,[2,76]),o($Vv,[2,77]),o($Vv,[2,78]),{1:[2,1]},o($Vj,[2,2]),{15:[1,57]},{15:[2,52],42:$Vr,43:$Vs,71:$Vt,72:$Vu},{17:[1,59],41:62,51:$V9,52:$Va,53:$Vb,54:$Vc,56:58,59:60,60:61},{14:[1,63]},{15:$V1,20:64,27:67,61:65,64:$Vw,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{2:$Vx,9:71,10:70,11:10,12:$V0,15:$V1,19:$V2,22:68,23:$V3,24:$V4,27:25,30:$V5,31:$V6,32:$V7,34:$Vy,41:73,45:19,48:24,51:$V9,52:$Va,53:$Vb,54:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:[1,74]},{15:$V1,25:75,27:77,41:76,51:$V9,52:$Va,53:$Vb,54:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:$V1,20:78,27:67,61:65,64:$Vw,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{2:$Vx,9:71,10:81,11:10,12:$V0,15:$V1,19:$V2,23:$V3,24:$V4,27:25,29:79,30:$V5,31:$V6,32:$V7,34:$Vz,41:73,45:19,48:24,51:$V9,52:$Va,53:$Vb,54:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:$V1,27:82,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($Vp,$Vq,{15:[2,51],42:$Vr,43:$Vs,71:$Vt,72:$Vu}),{18:$Vl,26:$Vm,46:83,47:$Vn},o($Vk,[2,36]),{15:$V1,27:25,48:84,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($Vk,[2,37]),{15:$V1,27:85,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:$V1,27:86,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:$V1,27:87,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:$V1,27:88,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:$V1,27:89,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{17:[1,90],42:$Vr,43:$Vs,71:$Vt,72:$Vu},{17:[1,91]},{21:[1,92]},{21:[2,53]},{17:[1,93],47:[1,94]},o($VA,[2,56]),{15:$V1,27:95,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:[1,96]},{17:[1,97]},o($VB,[2,61],{62:[1,98],63:[1,99]}),{15:$V1,27:67,61:100,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{42:$Vr,43:$Vs,65:[1,101],66:[1,102],67:[1,103],68:[1,104],69:[1,105],70:[1,106],71:$Vt,72:$Vu},o($Vk,[2,14]),o($Vk,[2,30]),{9:108,11:10,12:$V0,15:$V1,19:$V2,23:$V3,24:$V4,27:25,30:$V5,31:$V6,32:$V7,34:[1,107],41:73,45:19,48:24,51:$V9,52:$Va,53:$Vb,54:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($VC,[2,9]),o($VC,[2,10]),{15:$V1,27:25,45:47,48:24,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:$V1,20:109,27:67,61:65,64:$Vw,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{26:[1,110]},{15:$V1,27:111,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{26:[2,27],42:$Vr,43:$Vs,71:$Vt,72:$Vu},{17:[1,112]},o($Vk,[2,18]),o($Vk,[2,32]),{9:108,11:10,12:$V0,15:$V1,19:$V2,23:$V3,24:$V4,27:25,30:$V5,31:$V6,32:$V7,34:[1,113],41:73,44:[1,114],45:19,48:24,51:$V9,52:$Va,53:$Vb,54:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{17:[1,115],42:$Vr,43:$Vs,71:$Vt,72:$Vu},o($Vk,[2,35]),o($Vp,[2,39]),{18:[1,116],42:$Vr,43:$Vs,71:$Vt,72:$Vu},o($VD,[2,68],{71:$Vt,72:$Vu}),o($VD,[2,69],{71:$Vt,72:$Vu}),o($Vv,[2,70]),o($Vv,[2,71]),o($Vv,[2,74]),{21:[1,117]},{2:$Vx,9:71,10:118,11:10,12:$V0,15:$V1,19:$V2,23:$V3,24:$V4,27:25,30:$V5,31:$V6,32:$V7,41:73,45:19,48:24,51:$V9,52:$Va,53:$Vb,54:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{21:[2,54]},{41:62,51:$V9,52:$Va,53:$Vb,54:$Vc,60:119},o($VA,[2,57],{42:$Vr,43:$Vs,71:$Vt,72:$Vu}),{15:$V1,16:120,27:121,35:[1,122],73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{21:[1,123]},{15:$V1,27:67,61:124,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:$V1,27:67,61:125,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($VB,[2,60]),{15:$V1,27:126,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:$V1,27:127,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:$V1,27:128,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:$V1,27:129,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:$V1,27:130,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:$V1,27:131,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($Vk,[2,31]),o($VC,[2,8]),{17:[1,132]},{15:$V1,27:133,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{26:[2,26],42:$Vr,43:$Vs,71:$Vt,72:$Vu},{21:[1,134]},o($Vk,[2,33]),{18:[1,135]},{21:[1,136]},o($Vk,[2,38]),{2:$Vx,9:71,10:137,11:10,12:$V0,15:$V1,19:$V2,23:$V3,24:$V4,27:25,30:$V5,31:$V6,32:$V7,41:73,45:19,48:24,51:$V9,52:$Va,53:$Vb,54:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{9:108,11:10,12:$V0,15:$V1,19:$V2,23:$V3,24:$V4,27:25,30:$V5,31:$V6,32:$V7,34:[1,139],41:73,45:19,48:24,51:$V9,52:$Va,53:$Vb,54:$Vc,57:138,58:[1,140],73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($VA,[2,55]),{17:[1,141]},{17:[2,20],42:$Vr,43:$Vs,71:$Vt,72:$Vu},{17:[2,21]},{2:$Vx,9:71,10:70,11:10,12:$V0,15:$V1,19:$V2,22:142,23:$V3,24:$V4,27:25,30:$V5,31:$V6,32:$V7,34:$Vy,41:73,45:19,48:24,51:$V9,52:$Va,53:$Vb,54:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($VB,[2,58]),o($VB,[2,59]),o($VE,[2,62],{42:$Vr,43:$Vs,71:$Vt,72:$Vu}),o($VE,[2,63],{42:$Vr,43:$Vs,71:$Vt,72:$Vu}),o($VE,[2,64],{42:$Vr,43:$Vs,71:$Vt,72:$Vu}),o($VE,[2,65],{42:$Vr,43:$Vs,71:$Vt,72:$Vu}),o($VE,[2,66],{42:$Vr,43:$Vs,71:$Vt,72:$Vu}),o($VE,[2,67],{42:$Vr,43:$Vs,71:$Vt,72:$Vu}),{21:[1,143]},{18:[1,144],42:$Vr,43:$Vs,71:$Vt,72:$Vu},{2:$Vx,9:71,10:81,11:10,12:$V0,15:$V1,19:$V2,23:$V3,24:$V4,27:25,29:145,30:$V5,31:$V6,32:$V7,34:$Vz,41:73,45:19,48:24,51:$V9,52:$Va,53:$Vb,54:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{34:[1,146]},{33:147,36:148,37:$VF,40:$VG},{9:108,11:10,12:$V0,15:$V1,19:$V2,23:$V3,24:$V4,27:25,30:$V5,31:$V6,32:$V7,34:[1,151],41:73,45:19,48:24,51:$V9,52:$Va,53:$Vb,54:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($Vj,[2,47]),o($Vj,[2,48]),{15:$V1,18:[1,152],27:153,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{18:[1,154]},o($Vk,[2,13]),{2:$Vx,9:71,10:70,11:10,12:$V0,15:$V1,19:$V2,22:155,23:$V3,24:$V4,27:25,30:$V5,31:$V6,32:$V7,34:$Vy,41:73,45:19,48:24,51:$V9,52:$Va,53:$Vb,54:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:$V1,20:156,27:67,61:65,64:$Vw,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($Vk,[2,17]),o($Vk,[2,34]),{34:[1,157],36:158,37:$VF,40:$VG},o($VH,[2,23]),{15:$V1,27:159,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{38:[1,160]},o($Vj,[2,42]),{34:[1,161]},{18:[1,162],42:$Vr,43:$Vs,71:$Vt,72:$Vu},o($Vk,[2,12]),o($Vk,[2,15]),{18:[1,163]},o($Vk,[2,19]),o($VH,[2,22]),{38:[1,164],42:$Vr,43:$Vs,71:$Vt,72:$Vu},{2:$Vx,9:71,10:165,11:10,12:$V0,15:$V1,19:$V2,23:$V3,24:$V4,27:25,30:$V5,31:$V6,32:$V7,41:73,45:19,48:24,51:$V9,52:$Va,53:$Vb,54:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($Vj,[2,49]),{34:[1,166]},{15:$V1,27:167,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{2:$Vx,9:71,10:168,11:10,12:$V0,15:$V1,19:$V2,23:$V3,24:$V4,27:25,30:$V5,31:$V6,32:$V7,41:73,45:19,48:24,51:$V9,52:$Va,53:$Vb,54:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($VH,[2,25],{11:10,45:19,48:24,27:25,41:73,9:108,12:$V0,15:$V1,19:$V2,23:$V3,24:$V4,30:$V5,31:$V6,32:$V7,51:$V9,52:$Va,53:$Vb,54:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi}),o($Vj,[2,50]),{28:169,42:[1,170],43:[1,171],71:$Vt,72:$Vu},{9:108,11:10,12:$V0,15:$V1,19:$V2,23:$V3,24:$V4,27:25,30:$V5,31:$V6,32:$V7,39:[1,172],41:73,45:19,48:24,51:$V9,52:$Va,53:$Vb,54:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{17:[1,173]},{15:$V1,27:86,42:[1,174],73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{15:$V1,27:87,43:[1,175],73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},{18:[1,176]},{21:[1,177]},{17:[2,28]},{17:[2,29]},o($VH,[2,24]),{2:$Vx,9:71,10:81,11:10,12:$V0,15:$V1,19:$V2,23:$V3,24:$V4,27:25,29:178,30:$V5,31:$V6,32:$V7,34:$Vz,41:73,45:19,48:24,51:$V9,52:$Va,53:$Vb,54:$Vc,73:$Vd,74:$Ve,75:$Vf,76:$Vg,77:$Vh,78:$Vi},o($Vk,[2,16])],
defaultActions: {33:[2,1],59:[2,53],93:[2,54],122:[2,21],174:[2,28],175:[2,29]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 52;
break;
case 1:return 53;
break;
case 2:return 54;
break;
case 3:return 'RBOOL';
break;
case 4:return 51;
break;
case 5:return 49;
break;
case 6:return 12;
break;
case 7:return 14;
break;
case 8:return 19;
break;
case 9:return 23;
break;
case 10:return 32;
break;
case 11:return 37;
break;
case 12:return 40;
break;
case 13:return 24;
break;
case 14:return 30;
break;
case 15:return 31;
break;
case 16:return 58;
break;
case 17:return 39;
break;
case 18:return 44;
break;
case 19:return 50;
break;
case 20:return 77;
break;
case 21:return 78;
break;
case 22:return 18;
break;
case 23:return "COMA";
break;
case 24:return 13;
break;
case 25:return 38;
break;
case 26:return 15;
break;
case 27:return 17;
break;
case 28:return 21;
break;
case 29:return 34;
break;
case 30:return 'CORIZQ';
break;
case 31:return 'CORDER';
break;
case 32:return 42;
break;
case 33:return 43;
break;
case 34:return 71;
break;
case 35:return 72;
break;
case 36:return 'INCREMENTO';
break;
case 37:return 'DECREMENTO'
break;
case 38:return 62;
break;
case 39:return 63;
break;
case 40:return 65;
break;
case 41:return 66;
break;
case 42:return 67;
break;
case 43:return 68;
break;
case 44:return 69;
break;
case 45:return 70;
break;
case 46:return 64;
break;
case 47:return 26;
break;
case 48:
break;
case 49:
break;
case 50:return 74;
break;
case 51:return 73;
break;
case 52:return 76; 
break;
case 53: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 35; 
break;
case 54: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 75; 
break;
case 55:return 5;
break;
case 56: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:console\b)/i,/^(?:write\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:return\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:main\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:>)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:=)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*\b)/i,/^(?:('[^']*'))/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}