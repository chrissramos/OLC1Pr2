/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,32],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[1,19],$Va=[1,23],$Vb=[1,8],$Vc=[1,24],$Vd=[1,25],$Ve=[1,26],$Vf=[1,27],$Vg=[1,30],$Vh=[1,31],$Vi=[1,33],$Vj=[1,34],$Vk=[1,35],$Vl=[1,36],$Vm=[5,12,15,19,23,24,29,30,31,34,35,37,51,53,54,55,56,73,74,75,76,77,78],$Vn=[1,41],$Vo=[5,12,15,19,23,24,29,30,31,33,34,35,37,42,44,51,53,54,55,56,60,73,74,75,76,77,78],$Vp=[1,57],$Vq=[1,58],$Vr=[1,56],$Vs=[2,84],$Vt=[15,37,73,74,75,76,77,78],$Vu=[18,26,39],$Vv=[2,48],$Vw=[1,60],$Vx=[1,61],$Vy=[1,62],$Vz=[1,63],$VA=[15,17,18,26,39,43,46,47,64,65,67,68,69,70,71,72],$VB=[1,74],$VC=[1,80],$VD=[1,77],$VE=[1,88],$VF=[2,22],$VG=[1,98],$VH=[17,39],$VI=[17,18],$VJ=[17,18,64,65],$VK=[12,15,19,23,24,29,30,31,33,34,35,37,42,44,53,54,55,56,60,73,74,75,76,77,78],$VL=[15,17,18,26,39,43,46,47,64,65,67,68,69,70],$VM=[1,163],$VN=[1,164],$VO=[33,42,44],$VP=[2,31];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"main":7,"metodo":8,"adentro":9,"adentros":10,"declaracionvar":11,"RCONSOLE":12,"PUNTO":13,"RWRITE":14,"PARIZQ":15,"expresion":16,"PARDER":17,"PTCOMA":18,"RIF":19,"expresionlogica":20,"LLAVEIZQ":21,"finif":22,"RELSE":23,"RFOR":24,"variablefor":25,"IGUAL":26,"subirfor":27,"poscontinue":28,"RWHILE":29,"RDO":30,"RSWITCH":31,"casos":32,"LLAVEDER":33,"RCONTINUE":34,"RBREAK":35,"llamarmetodo":36,"IDENTIFICADOR":37,"listapar":38,"COMA":39,"par":40,"casoevaluar":41,"RCASE":42,"DOSPUNTOS":43,"RDEFAULT":44,"tipodato":45,"MAS":46,"MENOS":47,"listavariables":48,"asingacionuna":49,"variablesls":50,"RVOID":51,"RMAIN":52,"RSTRING":53,"RINT":54,"RDOUBLE":55,"RCHAR":56,"tipometodo":57,"parametrosdentro":58,"posreturn":59,"RRETURN":60,"listaparametros":61,"parametros":62,"expresionrelacional":63,"ANDY":64,"ORO":65,"ADMIRACION":66,"MAYOR":67,"MENOR":68,"IGUALES":69,"DISTINTO":70,"POR":71,"DIVIDIDO":72,"ENTERO":73,"DECIMAL":74,"CADENA":75,"RTRUE":76,"RFALSE":77,"CONTENIDOHTML":78,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"RCONSOLE",13:"PUNTO",14:"RWRITE",15:"PARIZQ",17:"PARDER",18:"PTCOMA",19:"RIF",21:"LLAVEIZQ",23:"RELSE",24:"RFOR",26:"IGUAL",29:"RWHILE",30:"RDO",31:"RSWITCH",33:"LLAVEDER",34:"RCONTINUE",35:"RBREAK",37:"IDENTIFICADOR",39:"COMA",42:"RCASE",43:"DOSPUNTOS",44:"RDEFAULT",46:"MAS",47:"MENOS",51:"RVOID",52:"RMAIN",53:"RSTRING",54:"RINT",55:"RDOUBLE",56:"RCHAR",60:"RRETURN",64:"ANDY",65:"ORO",66:"ADMIRACION",67:"MAYOR",68:"MENOR",69:"IGUALES",70:"DISTINTO",71:"POR",72:"DIVIDIDO",73:"ENTERO",74:"DECIMAL",75:"CADENA",76:"RTRUE",77:"RFALSE",78:"CONTENIDOHTML"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[10,2],[10,1],[10,1],[9,1],[9,7],[9,6],[9,3],[9,7],[9,13],[9,6],[9,3],[9,5],[9,7],[9,2],[9,2],[9,1],[36,4],[36,5],[38,3],[38,1],[40,1],[32,2],[32,1],[41,6],[41,3],[25,2],[25,1],[27,2],[27,2],[22,1],[22,2],[28,1],[28,2],[11,3],[11,2],[49,1],[49,3],[49,2],[48,3],[48,1],[50,1],[7,7],[45,1],[45,1],[45,1],[45,1],[8,6],[59,1],[59,3],[59,4],[57,2],[57,2],[58,1],[58,2],[61,3],[61,1],[62,2],[20,3],[20,3],[20,2],[20,1],[63,3],[63,3],[63,4],[63,4],[63,3],[63,3],[63,1],[16,3],[16,3],[16,3],[16,3],[16,1],[16,1],[16,3],[16,1],[16,1],[16,1],[16,1],[16,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
		fs.writeFileSync('./codigopy.txt', $$[$0-1]);
		console.log($$[$0-1])
		return $$[$0-1];
		
break;
case 2:
this.$ = $$[$0-1] +$$[$0];
break;
case 3: case 7:
this.$ = $$[$0];
break;
case 4: case 10:
 console.error('Este es un error sintÃ¡ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 5: case 6: case 11: case 23: case 27: case 28: case 30: case 33: case 47: case 48:
this.$= $$[$0];  
break;
case 8:
this.$ = $$[$0-1] + $$[$0] ;
break;
case 9:
this.$ = [$$[$0]];
break;
case 12:
 this.$ = "print("+ $$[$0-2]+ ")\n";  
break;
case 13:
this.$= "if " + $$[$0-3] +":\n" + $$[$0] + "\n" ;  
break;
case 14:
this.$= "else: \n" +  $$[$0] + "\n"; 
break;
case 15:
this.$= "elif " + $$[$0-3] + ":\n" + $$[$0] + "\n" ;  
break;
case 16:
this.$= "for " + $$[$0-10] + "in range (" + $$[$0-8] + ",): \n" + $$[$0] ;  
break;
case 17:
this.$= "while " + $$[$0-3] + ":" + $$[$0] + "\n";  
break;
case 18:
this.$= "while" + $$[$0] + "\n" ;  
break;
case 19:
this.$= "while(" + $$[$0-2] + "): \n" ;  
break;
case 20:
this.$= "def switch(" + $$[$0-4] + "): " + $$[$0-1]; + "\n" 
break;
case 21:
this.$= "continue \n";  
break;
case 22:
this.$= "break \n";  
break;
case 24:
this.$= $$[$0-3] + "()\n";  
break;
case 25:
this.$= $$[$0-4] + "(" + $$[$0-2] + ")\n";  
break;
case 26:
this.$= $$[$0-2] + ", " + $$[$0];  
break;
case 29:
this.$= $$[$0-1]+$$[$0];  
break;
case 31:
this.$= expresion + ":" + $$[$0-2] + "\n";  
break;
case 34:
this.$= $$[$0] ;  
break;
case 37: case 39: case 43: case 55:
this.$= "\n";  
break;
case 38: case 40:
this.$= $$[$0-1] + "\n";  
break;
case 41:
this.$= $$[$0-2]+ $$[$0-1]+ $$[$0];  
break;
case 42:
this.$= $$[$0-1] + $$[$0]  ;  
break;
case 44:
this.$= " = " + $$[$0-1] +"\n" ;  
break;
case 45:
this.$= "= " + $$[$0]; + "\n"  
break;
case 46:
this.$= $$[$0-2] +","  + $$[$0-1];  
break;
case 49:
this.$= "def main (): \n " + $$[$0-1] +"\n"  ;  
break;
case 50: case 51: case 52: case 53:
 this.$ = "var";
break;
case 54:
 this.$ = $$[$0-5]+ "(" + $$[$0-3] + ":\n" + $$[$0-1] + $$[$0] ;
break;
case 56:
this.$= "return\n" ;  
break;
case 57:
this.$= "return\n"+ $$[$0-2] + "\n";  
break;
case 58:
 this.$ = " def " + $$[$0];
break;
case 59:
 this.$ = " def " + $$[$0-1] ;
break;
case 60:
 this.$ = ")";
break;
case 61:
 this.$ = $$[$0-1] + ")";
break;
case 62:
 this.$ = $$[$0-2] +"," + $$[$0];
break;
case 63: case 68:
 this.$ = $$[$0];
break;
case 64:
 this.$ = "var" + $$[$0-1];
break;
case 65:
 this.$ = $$[$0-2] + " and "+ $$[$0]; 
break;
case 66:
 this.$ = $$[$0-2] + " or "+ $$[$0]; 
break;
case 67:
 this.$ =  " not "+ $$[$0]; 
break;
case 69:
 this.$ = $$[$0-2] + " >"+ $$[$0]; 
break;
case 70:
 this.$ = $$[$0-2]+ " <"+ $$[$0]; 
break;
case 71:
 this.$ = $$[$0-3]+ " >="+ $$[$0-1]; 
break;
case 72:
 this.$ = $$[$0-3] +" <="+ $$[$0-1]; 
break;
case 73:
 this.$ = $$[$0-2] +"=="+ $$[$0]; 
break;
case 74:
 this.$ = $$[$0-2]+ "!=" +$$[$0]; 
break;
case 75: case 80: case 81: case 83: case 84: case 85: case 86: case 87:
 this.$ = $$[$0]; 
break;
case 76:
 this.$ = $$[$0-2] + "+" + $$[$0]; 
break;
case 77:
 this.$ = $$[$0-2] + "-"+ $$[$0]; 
break;
case 78:
 this.$ = $$[$0-2] + "*"+ $$[$0]; 
break;
case 79:
 this.$ = $$[$0-2] + "/" +$$[$0]; 
break;
case 82:
 this.$ = "(" + $$[$0-1] + ")"; 
break;
}
},
table: [{2:[1,4],3:1,4:2,6:3,7:5,8:6,9:7,11:10,12:$V0,15:$V1,16:29,19:$V2,23:$V3,24:$V4,29:$V5,30:$V6,31:$V7,34:$V8,35:$V9,36:20,37:$Va,45:21,48:22,50:28,51:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:9,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{1:[3]},{5:[1,37],6:38,7:5,8:6,9:7,11:10,12:$V0,15:$V1,16:29,19:$V2,23:$V3,24:$V4,29:$V5,30:$V6,31:$V7,34:$V8,35:$V9,36:20,37:$Va,45:21,48:22,50:28,51:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:9,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vm,[2,3]),o($Vm,[2,4]),o($Vm,[2,5]),o($Vm,[2,6]),o($Vm,[2,7]),{15:$V1,16:40,37:$Vn,52:[1,39],73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:[1,42]},o($Vo,[2,11]),{13:[1,43]},{15:[1,44]},{19:[1,46],21:[1,45]},{15:[1,47]},{15:[1,48]},{21:[1,49]},{15:[1,50]},{18:[1,51]},{18:[1,52]},o($Vo,[2,23]),{15:$V1,16:53,37:$Vn,48:54,50:28,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{18:$Vp,26:$Vq,39:$Vr,49:55},o([18,26,39,46,47,71,72],$Vs,{15:[1,59]}),o($Vt,[2,50]),o($Vt,[2,51]),o($Vt,[2,52]),o($Vt,[2,53]),o($Vu,[2,47]),o($Vu,$Vv,{46:$Vw,47:$Vx,71:$Vy,72:$Vz}),o($VA,[2,80]),o($VA,[2,81]),{15:$V1,16:64,37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($VA,[2,83]),o($VA,[2,85]),o($VA,[2,86]),o($VA,[2,87]),{1:[2,1]},o($Vm,[2,2]),{15:[1,65]},{15:[2,59],46:$Vw,47:$Vx,71:$Vy,72:$Vz},o($VA,$Vs),{17:[1,67],45:70,53:$Vc,54:$Vd,55:$Ve,56:$Vf,58:66,61:68,62:69},{14:[1,71]},{15:$V1,16:75,20:72,37:$Vn,63:73,66:$VB,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{2:$VC,9:79,10:78,11:10,12:$V0,15:$V1,16:29,19:$V2,22:76,23:$V3,24:$V4,29:$V5,30:$V6,31:$V7,33:$VD,34:$V8,35:$V9,36:20,37:$Va,45:81,48:22,50:28,53:$Vc,54:$Vd,55:$Ve,56:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:[1,82]},{15:$V1,16:85,25:83,37:$Vn,45:84,53:$Vc,54:$Vd,55:$Ve,56:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:$V1,16:75,20:86,37:$Vn,63:73,66:$VB,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{2:$VC,9:79,10:89,11:10,12:$V0,15:$V1,16:29,19:$V2,23:$V3,24:$V4,28:87,29:$V5,30:$V6,31:$V7,33:$VE,34:$V8,35:$V9,36:20,37:$Va,45:81,48:22,50:28,53:$Vc,54:$Vd,55:$Ve,56:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:$V1,16:90,37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vo,[2,21]),o($Vo,$VF),o($Vu,$Vv,{15:[2,58],46:$Vw,47:$Vx,71:$Vy,72:$Vz}),{18:$Vp,26:$Vq,39:$Vr,49:91},o($Vo,[2,42]),{15:$V1,16:29,37:$Vn,50:92,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vo,[2,43]),{15:$V1,16:93,36:94,37:$Va,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{17:[1,95],37:$VG,38:96,40:97},{15:$V1,16:99,37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:$V1,16:100,37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:$V1,16:101,37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:$V1,16:102,37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{17:[1,103],46:$Vw,47:$Vx,71:$Vy,72:$Vz},{17:[1,104]},{21:[1,105]},{21:[2,60]},{17:[1,106],39:[1,107]},o($VH,[2,63]),{15:$V1,16:108,37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:[1,109]},{17:[1,110]},o($VI,[2,68],{64:[1,111],65:[1,112]}),{15:$V1,16:75,37:$Vn,63:113,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($VJ,[2,75],{46:$Vw,47:$Vx,67:[1,114],68:[1,115],69:[1,116],70:[1,117],71:$Vy,72:$Vz}),o($Vo,[2,14]),o($Vo,[2,37]),{9:119,11:10,12:$V0,15:$V1,16:29,19:$V2,23:$V3,24:$V4,29:$V5,30:$V6,31:$V7,33:[1,118],34:$V8,35:$V9,36:20,37:$Va,45:81,48:22,50:28,53:$Vc,54:$Vd,55:$Ve,56:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($VK,[2,9]),o($VK,[2,10]),{15:$V1,16:29,37:$Vn,48:54,50:28,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:$V1,16:75,20:120,37:$Vn,63:73,66:$VB,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{26:[1,121]},{15:$V1,16:122,37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{26:[2,34],46:$Vw,47:$Vx,71:$Vy,72:$Vz},{17:[1,123]},o($Vo,[2,18]),o($Vo,[2,39]),{9:119,11:10,12:$V0,15:$V1,16:29,19:$V2,23:$V3,24:$V4,29:$V5,30:$V6,31:$V7,33:[1,124],34:$V8,35:$V9,36:20,37:$Va,45:81,48:22,50:28,53:$Vc,54:$Vd,55:$Ve,56:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{17:[1,125],46:$Vw,47:$Vx,71:$Vy,72:$Vz},o($Vo,[2,41]),o($Vu,[2,46]),{18:[1,126],46:$Vw,47:$Vx,71:$Vy,72:$Vz},o($Vo,[2,45]),{18:[1,127]},{17:[1,128],39:[1,129]},o($VH,[2,27]),o($VH,[2,28]),o($VL,[2,76],{71:$Vy,72:$Vz}),o($VL,[2,77],{71:$Vy,72:$Vz}),o($VA,[2,78]),o($VA,[2,79]),o($VA,[2,82]),{21:[1,130]},{2:$VC,9:79,10:131,11:10,12:$V0,15:$V1,16:29,19:$V2,23:$V3,24:$V4,29:$V5,30:$V6,31:$V7,34:$V8,35:$V9,36:20,37:$Va,45:81,48:22,50:28,53:$Vc,54:$Vd,55:$Ve,56:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{21:[2,61]},{45:70,53:$Vc,54:$Vd,55:$Ve,56:$Vf,62:132},o($VH,[2,64],{46:$Vw,47:$Vx,71:$Vy,72:$Vz}),{15:$V1,16:133,37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{21:[1,134]},{15:$V1,16:75,37:$Vn,63:135,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:$V1,16:75,37:$Vn,63:136,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($VI,[2,67]),{15:$V1,16:137,26:[1,138],37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:$V1,16:139,26:[1,140],37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:$V1,16:141,37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:$V1,16:142,37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vo,[2,38]),o($VK,[2,8]),{17:[1,143]},{15:$V1,16:144,37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{26:[2,33],46:$Vw,47:$Vx,71:$Vy,72:$Vz},{18:[1,146],21:[1,145]},o($Vo,[2,40]),{21:[1,147]},o($Vo,[2,44]),o($Vo,[2,24]),{18:[1,148]},{37:$VG,40:149},{2:$VC,9:79,10:150,11:10,12:$V0,15:$V1,16:29,19:$V2,23:$V3,24:$V4,29:$V5,30:$V6,31:$V7,34:$V8,35:$V9,36:20,37:$Va,45:81,48:22,50:28,53:$Vc,54:$Vd,55:$Ve,56:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{9:119,11:10,12:$V0,15:$V1,16:29,19:$V2,23:$V3,24:$V4,29:$V5,30:$V6,31:$V7,33:[1,152],34:$V8,35:$V9,36:20,37:$Va,45:81,48:22,50:28,53:$Vc,54:$Vd,55:$Ve,56:$Vf,59:151,60:[1,153],73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($VH,[2,62]),{17:[1,154],46:$Vw,47:$Vx,71:$Vy,72:$Vz},{2:$VC,9:79,10:78,11:10,12:$V0,15:$V1,16:29,19:$V2,22:155,23:$V3,24:$V4,29:$V5,30:$V6,31:$V7,33:$VD,34:$V8,35:$V9,36:20,37:$Va,45:81,48:22,50:28,53:$Vc,54:$Vd,55:$Ve,56:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($VI,[2,65]),o($VI,[2,66]),o($VJ,[2,69],{46:$Vw,47:$Vx,71:$Vy,72:$Vz}),{15:$V1,16:156,37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($VJ,[2,70],{46:$Vw,47:$Vx,71:$Vy,72:$Vz}),{15:$V1,16:157,37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($VJ,[2,73],{46:$Vw,47:$Vx,71:$Vy,72:$Vz}),o($VJ,[2,74],{46:$Vw,47:$Vx,71:$Vy,72:$Vz}),{21:[1,158]},{18:[1,159],46:$Vw,47:$Vx,71:$Vy,72:$Vz},{2:$VC,9:79,10:89,11:10,12:$V0,15:$V1,16:29,19:$V2,23:$V3,24:$V4,28:160,29:$V5,30:$V6,31:$V7,33:$VE,34:$V8,35:$V9,36:20,37:$Va,45:81,48:22,50:28,53:$Vc,54:$Vd,55:$Ve,56:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vo,[2,19]),{32:161,41:162,42:$VM,44:$VN},o($Vo,[2,25]),o($VH,[2,26]),{9:119,11:10,12:$V0,15:$V1,16:29,19:$V2,23:$V3,24:$V4,29:$V5,30:$V6,31:$V7,33:[1,165],34:$V8,35:$V9,36:20,37:$Va,45:81,48:22,50:28,53:$Vc,54:$Vd,55:$Ve,56:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vm,[2,54]),o($Vm,[2,55]),{15:$V1,16:167,18:[1,166],37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{18:[1,168]},o($Vo,[2,13]),o($VJ,[2,71],{46:$Vw,47:$Vx,71:$Vy,72:$Vz}),o($VJ,[2,72],{46:$Vw,47:$Vx,71:$Vy,72:$Vz}),{2:$VC,9:79,10:78,11:10,12:$V0,15:$V1,16:29,19:$V2,22:169,23:$V3,24:$V4,29:$V5,30:$V6,31:$V7,33:$VD,34:$V8,35:$V9,36:20,37:$Va,45:81,48:22,50:28,53:$Vc,54:$Vd,55:$Ve,56:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:$V1,16:75,20:170,37:$Vn,63:73,66:$VB,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vo,[2,17]),{33:[1,171],41:172,42:$VM,44:$VN},o($VO,[2,30]),{15:$V1,16:173,37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{43:[1,174]},o($Vm,[2,49]),{33:[1,175]},{18:[1,176],46:$Vw,47:$Vx,71:$Vy,72:$Vz},o($Vo,[2,12]),o($Vo,[2,15]),{18:[1,177]},o($Vo,[2,20]),o($VO,[2,29]),{43:[1,178],46:$Vw,47:$Vx,71:$Vy,72:$Vz},{2:$VC,9:79,10:179,11:10,12:$V0,15:$V1,16:29,19:$V2,23:$V3,24:$V4,29:$V5,30:$V6,31:$V7,34:$V8,35:$V9,36:20,37:$Va,45:81,48:22,50:28,53:$Vc,54:$Vd,55:$Ve,56:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vm,[2,56]),{33:[1,180]},{15:$V1,16:181,37:$Vn,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{2:$VC,9:79,10:182,11:10,12:$V0,15:$V1,16:29,19:$V2,23:$V3,24:$V4,29:$V5,30:$V6,31:$V7,34:$V8,35:$V9,36:20,37:$Va,45:81,48:22,50:28,53:$Vc,54:$Vd,55:$Ve,56:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($VO,[2,32],{11:10,36:20,48:22,50:28,16:29,45:81,9:119,12:$V0,15:$V1,19:$V2,23:$V3,24:$V4,29:$V5,30:$V6,31:$V7,34:$V8,35:$V9,37:$Va,53:$Vc,54:$Vd,55:$Ve,56:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl}),o($Vm,[2,57]),{27:183,46:[1,184],47:[1,185],71:$Vy,72:$Vz},{9:119,11:10,12:$V0,15:$V1,16:29,19:$V2,23:$V3,24:$V4,29:$V5,30:$V6,31:$V7,34:$V8,35:[1,186],36:20,37:$Va,45:81,48:22,50:28,53:$Vc,54:$Vd,55:$Ve,56:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{17:[1,187]},{15:$V1,16:99,37:$Vn,46:[1,188],73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{15:$V1,16:100,37:$Vn,47:[1,189],73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{18:[1,190]},{21:[1,191]},{17:[2,35]},{17:[2,36]},o([12,15,19,23,24,29,30,31,34,35,37,53,54,55,56,73,74,75,76,77,78],$VF,{33:$VP,42:$VP,44:$VP}),{2:$VC,9:79,10:89,11:10,12:$V0,15:$V1,16:29,19:$V2,23:$V3,24:$V4,28:192,29:$V5,30:$V6,31:$V7,33:$VE,34:$V8,35:$V9,36:20,37:$Va,45:81,48:22,50:28,53:$Vc,54:$Vd,55:$Ve,56:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vo,[2,16])],
defaultActions: {37:[2,1],67:[2,60],106:[2,61],188:[2,35],189:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

var fs = require('fs');
var contHtml = "";	
var errorLexico = "<table> <tr> <th>Tipo error</th> <th>Linea </th> <th>Columna </th> <th>Descripcion </th> </tr> ";

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 54;
break;
case 1:return 55;
break;
case 2:return 56;
break;
case 3:return 'RBOOL';
break;
case 4:return 53;
break;
case 5:return 51;
break;
case 6:return 12;
break;
case 7:return 14;
break;
case 8:return 19;
break;
case 9:return 23;
break;
case 10:return 31;
break;
case 11:return 42;
break;
case 12:return 44;
break;
case 13:return 24;
break;
case 14:return 29;
break;
case 15:return 30;
break;
case 16:return 60;
break;
case 17:return 35;
break;
case 18:return 34;
break;
case 19:return 52;
break;
case 20:return 76;
break;
case 21:return 77;
break;
case 22:return 18;
break;
case 23:return "COMA";
break;
case 24:return 13;
break;
case 25:return 43;
break;
case 26:return 15;
break;
case 27:return 17;
break;
case 28:return 21;
break;
case 29:return 33;
break;
case 30:return 'CORIZQ';
break;
case 31:return 'CORDER';
break;
case 32:return 46;
break;
case 33:return 47;
break;
case 34:return 71;
break;
case 35:return 72;
break;
case 36:return 'INCREMENTO';
break;
case 37:return 'DECREMENTO'
break;
case 38:return 64;
break;
case 39:return 65;
break;
case 40:return 67;
break;
case 41:return 68;
break;
case 42:return 'MAYORIGUAL';
break;
case 43:return 'MENORIGUAL';
break;
case 44:return 69;
break;
case 45:return 70;
break;
case 46:return 66;
break;
case 47:return 26;
break;
case 48:
break;
case 49:
break;
case 50:return 74;
break;
case 51:return 73;
break;
case 52:return 37; 
break;
case 53: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 78; 
break;
case 54: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 75; 
break;
case 55://Comentario Simple
break;
case 56://Comentario Multi			
break;
case 57:return 5;
break;
case 58: 
						errorLexico += " <tr> <th> Lexico </th> <th> " +  yy_.yylloc.first_line + "</th> <th> " +  yy_.yylloc.first_column + "</th> <th>" + "El caracter: " + yy_.yytext + " No es parte del lenguaje </th> </tr>" ; 
						console.log(errorLexico);
						//console.error('Este es un error lÃ©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
						
break;
}
},
rules: [/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:console\b)/i,/^(?:write\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:return\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:main\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:>)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:=)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*\b)/i,/^(?:('[^']*'))/i,/^(?:"[^\"]*")/i,/^(?:(\/\/.*\r\n)|(\/\/.*\n)|(\/\/\.\*\\r))/i,/^(?:\/\*\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica2;
exports.Parser = gramatica2.Parser;
exports.parse = function () { return gramatica2.parse.apply(gramatica2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}